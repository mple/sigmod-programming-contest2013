SIGMOD Programming Contest 2013

(a)TeamName: Mple

(b)Members:

Alexander Sibetheros, sdi0900261@di.uoa.gr, University of Athens, Department of Informatics and Telecommunications, Undergraduate Student  
John Chronis, sdi0900125@di.uoa.gr, University of Athens, Department of Informatics and Telecommunications, Undergraduate Student  
Evangelos Nikolopoulos, sdi0900089@di.uoa.gr, University of Athens, Department of Informatics and Telecommunications, Undergraduate Student  
Stravos Petsalakis, sdi0900236@di.uoa.gr, University of Athens, Department of Informatics and Telecommunications, Undergraduate Student
Dimitirianos Savva sdi0900018@di.uoa.gr, University of Athens, Department of Informatics and Telecommunications, Undergraduate Student  

(c)Supervisor:

Herald Kllapi, herald@di.uoa.gr, Department of Informatics and Telecommunications,Phd Student 

(d)Brief Description

We observed a big overlap in queries, tokens and documents. The unique document words are arriving in a linear fashion. This is also true for the unique query words(tokens). So we instrumented our code to de-duplicate queries as whole. Tokens and document words are saved uniquely. So by having two different managers ( one for tokens and one for tokens) we compress the data,
We use a job scheduling approach to organize the threads.
We store relations between document words and query tokens based on the type of matching (edit, hamming,exact and 1,2,3). 
When a document token or query token arrives we search for it in our managers, if it has not already arrived  we insert into our hashmaps  deletion neighborhoods of that token. 
When we proccess new token word and query token we create new relations between tokens and words.
The final step is to access our relation and extract which tokens match the document words that are active in a particular batch, after that we create the result that we return.
Our implementation is based on words and token worlds that evolve through time. In every batch we need  to compute relations of new words and tokens which are the Delta of our world and the tokens and words of the current batch. 



(e)Third Party Code
-Google Sparse Hash  http://code.google.com/p/sparsehash/ New BSD License
-Google MurMurh Hashing Algorithm http://code.google.com/p/smhasher/ MIT License
